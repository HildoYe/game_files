
# Documentation For Leader Traits
# -------------------------------
#
# leader_trait_name_key = {
#
#	starting_ruler_trait = yes			This trait is available in ruler creation. Default is no.
#	allowed_origins = { }				OR - This trait is allowed in ruler creation if any of the listed origins is selected. If not specified, any origins are allowed.
#	forbidden_origins = { }				OR - This trait is blocked in ruler creation if listed origins are selected.
#	allowed_ethics = { }				OR - This trait is allowed in ruler creation if any of the listed ethics are selected. If not specified, any ethics are allowed.
#	cost = 1							This trait cost/gives this amount of points when selected in ruler creation.
#
#	icon = {							Layered icon format introduced in Galactic Paragons.
#		layer = {						There are no limits to the amount of layers that can be used.
#			icon = "GFX_name"			Texture name defined in "interface" folder. Default trait icons are in "interface\icons\traits" folder.
#			color = "color_name"		Layer color tint. Color name defined in "common\named_colors" folder.
#			visible = { }				Scripted trigger. If false, hide layer. THIS = Leader
#		}								( In Galactic Paragons, we use an inline script to define this, see below. )
#	}
#	background_icon = "GFX_name"		Background used in the subclass and destiny trait selection UI.
#
#	negative = yes						Is this a negative trait? Default is no.
#	immortal_leaders = yes				Is this leader immortal? Default is no.
#	ftl_inhibitor = yes					If yes, a planet with a general with this trait will have an FTL inhibitor. Default is no.
#	can_retreat = no					If yes, a fleet with an commander with this trait can use emergency FTL. Default is yes.
#	randomized = no						Is this trait available during leader generation, level up or yearly negative trait chance. Default is yes.
#	subclass_trait = yes				Is this a subclass trait? Default is no.
#	destiny_trait = yes					Is this a destiny trait? Default is no.
#	ethic_destiny_trait = yes			When selecting a destiny trait, one of the options will be an ethic destiny trait if possible. Default is no.
#	veteran_class_locked_trait = yes	Is this a veteran trait? Default is no.
#	notify_on_gained = no				If yes, a message will be shown when a leader gains this trait. Default is yes.
#	force_councilor_trait = yes			If yes, the trait will be treated as a councilor trait even if it does not have any councilor modifiers. Default is no.
#
#	modifier = { }						Modifier applied to scope leader is assigned to.
#	self_modifier = { }					Modifier applied to the leader itself.
#	planet_modifier = { }				Modifier applied to planet if Governor is assigned.
#	system_modifier = { }				Modifier applied to system if the leader is inside it. Only applied from/to unoccupied objects with the same controller as the system.
#	sector_modifier = { }				Modifier applied to all systems in sector if the leader is governing its capital and the capital is unoccupied. Not applied to planets with a governor.
#	fleet_modifier = { }				Modifier applied to the fleet the leader is assigned to.
#	army_modifier = { }				    Modifier applied to the armies this leader commands.
#	galcom_modifier = { }				Modifier applied to the country if this leader is assigned to the GalCom/GalEmp.
#	federation_modifier = { }			Modifier applied to the federation if this leader is the delegate to it.
#	background_planet_modifier = { }	Modifier applied to the leader's homeworld/background planet, if they have one.
#	councilor_modifier = { }			Modifier applied to country if leader is on the Council.
#
#	Modifiers applied if the given condition is fulfilled (THIS = Leader, FROM = the Scope the modifier will apply to):
#	triggered_modifier = { }
#	triggered_self_modifier = { }
#	triggered_planet_modifier = { }
#	triggered_system_modifier = { }
#	triggered_sector_modifier = { }
#	triggered_fleet_modifier = { }
#	triggered_army_modifier = { }
#	triggered_galcom_modifier = { }
#	triggered_federation_modifier = { }
#	triggered_background_planet_modifier = { }
#	triggered_councilor_modifier = { }
#
#	triggered_desc = {					Show key if trigger/exclusive_trigger is true.
#		trigger = { }					Trigger appends additional localization key to existing text. THIS = Leader
#		exclusive_trigger = { }			Exclusive trigger replaces all other text in tooltip with localization key. THIS = Leader
#		text = KEY
#	}
#
#	custom_subtitle = KEY 				Replaces auto-generated trait subtitle with localization key.
#	custom_tooltip = KEY 				Replaces auto-generated modifier effect text with localization key.
#	custom_tooltip_with_modifiers = KEY	Appends localization key to the end of auto-generated modifier effect text.
#
#	on_gained_effect = { }				Effects in this block fire when trait is acquired. THIS = Leader.
#
#	leader_class = { } | all			Limits which leader classes that can get this trait.
#	leader_potential_add = { }			If exists, evaluates if leader can get trait. Scope: THIS = Leader, FROM = Country.
#
#	requires_traits = { }	 			AND - Trait only available if the leader's species has this trait.
#	requires_governments = { }			OR - Trait only available if the Empire has this type of government form.
#	prerequisites = { }					AND - Trait only available if the technology specified has been researched by the Empire.
#	opposites = { }						OR - Trait only available if none of the listed traits are currently on leader.
#	replace_traits = { }				AND - Trait will remove listed traits currently on leader when added.
#
#	ai_weight = 25 | { }				Weight for being selected by AI. Default is 100. Can be a scripted weight, scope: THIS = Leader.
#	trade_acceptance_weight = 25 | { }	How much this trait increases the leader's value for the AI in trade deals. Default is TRADE_VALUE_LEADER_TRAIT_DEFAULT. Can be a scripted weight, scope: THIS = Leader.
#	fleet_specialization_tag = carrier	AI will outfit ships with components based on this tag if trait is selected.
#
#	selectable_weight = 25 | { }		Weight for availability at level up. Default is 100. Can be a scripted weight, scope: THIS = Leader, FROM = Country.
# }


# Galactic Paragons Trait Inline Script Documentation
# -----------------------------------------
#
# In Galactic Paragons, we use an inline script to define commonly used icon layers and also set the trait subtitle.
#
# inline_script = {
#	script = trait/icon
#	CLASS = commander						Class name. Accepted: leader, commander, general, scientist, official
#	ICON = GFX_name						Texture name defined in "interface" folder. Default trait icons are in "interface\icons\traits" folder.
#	RARITY = veteran					Rarity tag. Accepted: common, veteran, paragon
#	COUNCIL = yes						Is councilor trait? Accepted: yes, no, triggered (CLASS and COUNCIL will be set by triggered modifiers)
#	TIER = 2							Tier number. Accepted: none, 1, 2, 3
# }
